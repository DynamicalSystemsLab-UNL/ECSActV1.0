Here, 'solution_init.h5' contains a known equilibrium, including the field data in grid space and coefficient space representations.
The grid space representation is stored in (QAA, QAB, U, V). The coefficient space representation is stored as 2D, complex-valued
numpy arrays (QAA_coeff, QAB_coeff, U_coeff, V_coeff)

The activity and channel dimensions of the known equilibrium are:
	Ra = 1.0
	height = 20.0
	width = 20.0
These and other parameters are contained in the .h5 file.

The script here ("nematics2__GMRES_EQ.py") increments Ra by 0.005, so the target state is different from the initial guess. 
Also, it doubles the spatial resolution both the x and y dimensions, so as to give a better direct residual.
Finally, some of the parameters related to the krylov subspace and trust radius have been tweaked for better performance in this particular case.

Running "nematics2__GMRES_EQ.py" will produce the contents of the 'output' folder. Note that the Hookstep algorithm will be updated in future
releases to be much faster, performing the minimization directly using an SVD, versus a SLSQP approach.
The latter creates a bottleneck for certain equilibria, particularly at high resolutions.

Running "verify_EQ.py" in the directory containing 'solution.h5' will compute the direct residual of the UNpreconditioned nonlinear
operator and create the file "verification.out". Due to amplification of errors when calculating derivatives, this residual may be larger
than expected, even for accurate input states. Generally, high grid resolution is required
to see the direct residual approach machine precision.